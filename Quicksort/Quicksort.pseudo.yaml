constants: []
custom_exceptions: []
definitions:
- block:
  - pseudo_type: Void
    target: {name: pivot, pseudo_type: Int, type: local}
    type: assignment
    value:
      index: {name: high, pseudo_type: Int, type: local}
      pseudo_type: Int
      sequence:
        name: arr
        pseudo_type: [List, Int]
        type: local
      type: index
  - pseudo_type: Void
    target: {name: i, pseudo_type: Int, type: local}
    type: assignment
    value:
      left: {name: low, pseudo_type: Int, type: local}
      op: '-'
      pseudo_type: Int
      right: {pseudo_type: Int, type: int, value: 1}
      type: binary_op
  - block:
    - block:
      - pseudo_type: Void
        target: {name: i, pseudo_type: Int, type: local}
        type: assignment
        value:
          left: {name: i, pseudo_type: Int, type: local}
          op: +
          pseudo_type: Int
          right: {pseudo_type: Int, type: int, value: 1}
          type: binary_op
      - pseudo_type: Void
        target: {name: temp, pseudo_type: Int, type: local}
        type: assignment
        value:
          index: {name: i, pseudo_type: Int, type: local}
          pseudo_type: Int
          sequence:
            name: arr
            pseudo_type: [List, Int]
            type: local
          type: index
      - pseudo_type: Void
        target:
          index: {name: i, pseudo_type: Int, type: local}
          pseudo_type: Int
          sequence:
            name: arr
            pseudo_type: [List, Int]
            type: local
          type: index
        type: assignment
        value:
          index: {name: j, pseudo_type: Int, type: local}
          pseudo_type: Int
          sequence:
            name: arr
            pseudo_type: [List, Int]
            type: local
          type: index
      - pseudo_type: Void
        target:
          index: {name: j, pseudo_type: Int, type: local}
          pseudo_type: Int
          sequence:
            name: arr
            pseudo_type: [List, Int]
            type: local
          type: index
        type: assignment
        value: {name: temp, pseudo_type: Int, type: local}
      otherwise: null
      pseudo_type: Void
      test:
        left:
          index: {name: j, pseudo_type: Int, type: local}
          pseudo_type: Int
          sequence:
            name: arr
            pseudo_type: [List, Int]
            type: local
          type: index
        op: <=
        pseudo_type: Boolean
        right: {name: pivot, pseudo_type: Int, type: local}
        type: comparison
      type: if_statement
    end: {name: high, pseudo_type: Int, type: local}
    index: {name: j, pseudo_type: Int, type: local}
    pseudo_type: Void
    start: {name: low, pseudo_type: Int, type: local}
    step: {pseudo_type: Int, type: int, value: 1}
    type: for_range_statement
  - pseudo_type: Void
    target: {name: temp, pseudo_type: Int, type: local}
    type: assignment
    value:
      index:
        left: {name: i, pseudo_type: Int, type: local}
        op: +
        pseudo_type: Int
        right: {pseudo_type: Int, type: int, value: 1}
        type: binary_op
      pseudo_type: Int
      sequence:
        name: arr
        pseudo_type: [List, Int]
        type: local
      type: index
  - pseudo_type: Void
    target:
      index:
        left: {name: i, pseudo_type: Int, type: local}
        op: +
        pseudo_type: Int
        right: {pseudo_type: Int, type: int, value: 1}
        type: binary_op
      pseudo_type: Int
      sequence:
        name: arr
        pseudo_type: [List, Int]
        type: local
      type: index
    type: assignment
    value:
      index: {name: high, pseudo_type: Int, type: local}
      pseudo_type: Int
      sequence:
        name: arr
        pseudo_type: [List, Int]
        type: local
      type: index
  - pseudo_type: Void
    target:
      index: {name: high, pseudo_type: Int, type: local}
      pseudo_type: Int
      sequence:
        name: arr
        pseudo_type: [List, Int]
        type: local
      type: index
    type: assignment
    value: {name: temp, pseudo_type: Int, type: local}
  - pseudo_type: Int
    type: implicit_return
    value:
      left: {name: i, pseudo_type: Int, type: local}
      op: +
      pseudo_type: Int
      right: {pseudo_type: Int, type: int, value: 1}
      type: binary_op
  name: partition
  params:
  - name: arr
    pseudo_type: [List, Int]
    type: local
  - {name: low, pseudo_type: Int, type: local}
  - {name: high, pseudo_type: Int, type: local}
  pseudo_type:
  - Function
  - [List, Int]
  - Int
  - Int
  - Int
  return_type: Int
  type: function_definition
- block:
  - block:
    - pseudo_type: Void
      target: {name: pi, pseudo_type: Int, type: local}
      type: assignment
      value:
        args:
        - name: arr
          pseudo_type: [List, Int]
          type: local
        - {name: low, pseudo_type: Int, type: local}
        - {name: high, pseudo_type: Int, type: local}
        function:
          name: partition
          pseudo_type:
          - Function
          - [List, Int]
          - Int
          - Int
          - Int
          type: local
        pseudo_type: Int
        type: call
    - args:
      - name: arr
        pseudo_type: [List, Int]
        type: local
      - {name: low, pseudo_type: Int, type: local}
      - left: {name: pi, pseudo_type: Int, type: local}
        op: '-'
        pseudo_type: Int
        right: {pseudo_type: Int, type: int, value: 1}
        type: binary_op
      function:
        name: quickSort
        pseudo_type:
        - Function
        - [List, Int]
        - Int
        - Int
        - Void
        type: local
      pseudo_type: Void
      type: call
    - args:
      - name: arr
        pseudo_type: [List, Int]
        type: local
      - left: {name: pi, pseudo_type: Int, type: local}
        op: +
        pseudo_type: Int
        right: {pseudo_type: Int, type: int, value: 1}
        type: binary_op
      - {name: high, pseudo_type: Int, type: local}
      function:
        name: quickSort
        pseudo_type:
        - Function
        - [List, Int]
        - Int
        - Int
        - Void
        type: local
      pseudo_type: Void
      type: call
    otherwise: null
    pseudo_type: Void
    test:
      left: {name: low, pseudo_type: Int, type: local}
      op: <
      pseudo_type: Boolean
      right: {name: high, pseudo_type: Int, type: local}
      type: comparison
    type: if_statement
  name: quickSort
  params:
  - name: arr
    pseudo_type: [List, Int]
    type: local
  - {name: low, pseudo_type: Int, type: local}
  - {name: high, pseudo_type: Int, type: local}
  pseudo_type:
  - Function
  - [List, Int]
  - Int
  - Int
  - Void
  return_type: Void
  type: function_definition
dependencies: []
main:
- pseudo_type: Void
  target:
    name: arr
    pseudo_type: [List, Int]
    type: local
  type: assignment
  value:
    elements:
    - {pseudo_type: Int, type: int, value: 10}
    - {pseudo_type: Int, type: int, value: 7}
    - {pseudo_type: Int, type: int, value: 8}
    - {pseudo_type: Int, type: int, value: 9}
    - {pseudo_type: Int, type: int, value: 1}
    - {pseudo_type: Int, type: int, value: 5}
    pseudo_type: [List, Int]
    type: list
- pseudo_type: Void
  target: {name: n, pseudo_type: Int, type: local}
  type: assignment
  value: {pseudo_type: Int, type: int, value: 6}
- args:
  - name: arr
    pseudo_type: [List, Int]
    type: local
  - {pseudo_type: Int, type: int, value: 0}
  - left: {name: n, pseudo_type: Int, type: local}
    op: '-'
    pseudo_type: Int
    right: {pseudo_type: Int, type: int, value: 1}
    type: binary_op
  function:
    name: quickSort
    pseudo_type:
    - Function
    - [List, Int]
    - Int
    - Int
    - Void
    type: local
  pseudo_type: Void
  type: call
type: module
